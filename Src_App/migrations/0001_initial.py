# Generated by Django 5.0.2 on 2024-03-28 14:38

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Ad Title')),
                ('img', models.ImageField(upload_to='advertisement_images', verbose_name='Advertisement Image')),
            ],
        ),
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Title')),
            ],
        ),
        migrations.CreateModel(
            name='Course_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('cover', models.ImageField(default='', upload_to='course_category_images')),
            ],
        ),
        migrations.CreateModel(
            name='HomePageCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Video Title')),
                ('cover', models.ImageField(upload_to='video_covers', verbose_name='Video Cover')),
                ('adilio_link', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Adilio Link')),
                ('video_file', models.FileField(blank=True, upload_to='video_files', verbose_name='Video File')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded On')),
            ],
        ),
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('home_background', models.ImageField(default='', upload_to='home_page_background')),
                ('icon', models.ImageField(default='', upload_to='icons')),
                ('books_title', models.CharField(max_length=100)),
                ('books_background', models.ImageField(default='', upload_to='books_page_background')),
                ('videos_title', models.CharField(max_length=100)),
                ('videos_background', models.ImageField(default='', upload_to='videos_page_background')),
                ('videos_link_img', models.ImageField(default='', upload_to='tv_link')),
                ('books_link_img', models.ImageField(default='', upload_to='books_link')),
            ],
        ),
        migrations.CreateModel(
            name='VideoCategorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, verbose_name='Category Name')),
                ('img', models.ImageField(upload_to='category_covers')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('cover', models.ImageField(default='', upload_to='course_cover_images')),
                ('link', models.CharField(default='', max_length=100000)),
                ('favorites', models.PositiveIntegerField(default=0)),
                ('views', models.PositiveIntegerField(default=0)),
                ('viewers', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Src_App.course_category')),
            ],
        ),
        migrations.CreateModel(
            name='Flipbook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Filpbook Title')),
                ('flipbook_link', models.CharField(default='', max_length=1000, verbose_name='Flipbook Link')),
                ('overview', models.TextField(blank=True, default='', verbose_name='Flipbook Overview(optional)')),
                ('img', models.ImageField(default='', upload_to='Covers', verbose_name='Flipbook Cover')),
                ('html', models.FileField(blank=True, default='', upload_to='Flipbook_HTMLs', verbose_name='HTML File')),
                ('favorites', models.IntegerField(default=0)),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(blank=True, default='', max_length=10000)),
                ('parental_restriction', models.BooleanField(default=False, verbose_name='This Flipbook may be inappropiate for some kids')),
                ('views', models.IntegerField(blank=True, default=0, verbose_name='views')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Src_App.categorie')),
                ('viewers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=400, null=True)),
                ('content', models.TextField(verbose_name='Report Statement')),
                ('checked', models.BooleanField(default=False, verbose_name='Mark As Read')),
                ('reported_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSessionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_timeout', models.PositiveIntegerField(default=15, help_text='Session timeout in minutes', verbose_name='Timeout')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Video Title')),
                ('description', models.TextField(default='')),
                ('status', models.CharField(default='', max_length=2000)),
                ('adilio_link', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Adilio Link')),
                ('favorites', models.IntegerField(default=0)),
                ('cover', models.ImageField(upload_to='video_covers', verbose_name='Video Cover')),
                ('video_file', models.FileField(blank=True, null=True, upload_to='video_files', verbose_name='Video File')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded On')),
                ('views', models.IntegerField(default=0)),
                ('viewers', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='Src_App.videocategorie', verbose_name='Video Category')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=200, null=True, verbose_name='Last Name')),
                ('books_usage_limit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Books Limit')),
                ('videos_usage_limit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Videos Limit')),
                ('subscribed_on', models.DateTimeField(blank=True, null=True)),
                ('parental_lock', models.BooleanField(blank=True, default=False, null=True, verbose_name='Parental Lock')),
                ('has_subscription', models.BooleanField(blank=True, default=False, verbose_name='User has TatorTot Subscription')),
                ('logged_in_to', models.IntegerField(blank=True, default=0, verbose_name='Logged In to devices')),
                ('setting_access_code', models.CharField(blank=True, max_length=500, null=True, verbose_name='Settings Access Code')),
                ('allowed_for_books', models.BooleanField(default=True, null=True)),
                ('allowed_for_videos', models.BooleanField(default=True, null=True)),
                ('favorite_courses', models.ManyToManyField(to='Src_App.course', verbose_name='Favorite_Courses')),
                ('favourites', models.ManyToManyField(blank=True, to='Src_App.flipbook', verbose_name='Favourite Books')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('favourite_videos', models.ManyToManyField(blank=True, to='Src_App.video', verbose_name='Favorite Videos')),
            ],
        ),
    ]
